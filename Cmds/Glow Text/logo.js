const axios = require("axios");

module.exports = async (context) => {
    const { client, m, text } = context;

    // Step 1: If the user enters '.logo', show the logo selection menu
    if (text === '.logo') {
        const logoMenu = `üñºÔ∏è *Choose a logo style:*\n
1Ô∏è‚É£ glitchtext\n2Ô∏è‚É£ neonglitch\n3Ô∏è‚É£ writetext\n4Ô∏è‚É£ advancedglow\n5Ô∏è‚É£ typographytext\n6Ô∏è‚É£ pixelglitch\n7Ô∏è‚É£ flagtext\n8Ô∏è‚É£ flag3dtext\n9Ô∏è‚É£ deletingtext\nüîü blackpinkstyle\n1Ô∏è‚É£1Ô∏è‚É£ glowingtext\n1Ô∏è‚É£2Ô∏è‚É£ underwatertext\n1Ô∏è‚É£3Ô∏è‚É£ logomaker\n1Ô∏è‚É£4Ô∏è‚É£ cartoonstyle\n1Ô∏è‚É£5Ô∏è‚É£ papercutstyle\n1Ô∏è‚É£6Ô∏è‚É£ watercolortext\n1Ô∏è‚É£7Ô∏è‚É£ effectclouds\n1Ô∏è‚É£8Ô∏è‚É£ blackpinklogo\n\n*Example usage:* .glitchtext VOXMD!`;

        return m.reply(logoMenu);
    }

    // Step 2: Generate the logo based on user selection and text
    if (text.startsWith('.')) {
        const logoType = text.split(' ')[0].substring(1); // Get the logo type, e.g., 'glitchtext'
        const userText = text.split(' ').slice(1).join(' '); // Get the text after the logo type, e.g., 'VOXMD!'

        if (!userText) {
            return m.reply("‚ùå *Please provide text for the logo!*\n\nExample usage:\n`.glitchtext VOXMD!`");
        }

        try {
            // Notify user that the process has started
            await client.sendMessage(m.chat, { 
                text: "üé® *Generating your logo... Please wait!* ‚è≥" 
            });

            const apiUrl = `https://fastrestapis.fasturl.cloud/maker/ephoto360?text=${encodeURIComponent(userText)}&style=${logoType}`;

            // Send the generated logo
            await client.sendMessage(
                m.chat,
                {
                    image: { url: apiUrl },
                    caption: `üñºÔ∏è *Here is your generated logo for:* _${userText}_`,
                },
                { quoted: m }
            );
        } catch (error) {
            console.error("Logo generation error:", error.message);
            m.reply("‚ùå *Failed to generate the logo! Please try again later.*");
        }
    } else {
        // If the text is neither '.logo' nor a valid logo style, prompt for a valid command
        return m.reply("‚ùå *Invalid command!*\nUse `.logo` to view the logo styles.");
    }
};